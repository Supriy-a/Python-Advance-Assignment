Modules are collections of methods and constants. They cannot generate instances. Classes may generate instances (objects), and have per-instance state (instance variables).

Modules may be mixed in to classes and other modules. The mixed in module’s constants and methods blend into that class’s own, augmenting the class’s functionality. Classes, however, cannot be mixed in to anything.

A class may inherit from another class, but not from a module.

A module may not inherit from anything.

************************************************
class Employee:
    count=0
    def __init__(self, name, salary):
                 self.name = name
                 self.salary = salary

******************************************
emp = Employee("jay", 120000)

****************************************
class attributes created inside the class scope.
Shared across all objects.
Accessed using class name as well as using object with dot notation, e.g. classname.class_attribute or object.class_attribute
Changing value by using classname.class_attribute = value will be reflected to all the objects.

************************************************************************************************
Defined inside a constructor using the self parameter.
Specific to object.
Accessed using object dot notation e.g. object.instance_attribute
Changing value of instance attribute will not be reflected to other objects.

*******************************************************************************
self represents the instance of the class. By using the “self” keyword we can access the attributes and methods of the class in python. 
It binds the attributes with the given arguments. The reason you need to use self. 
is because Python does not use the @ syntax to refer to instance attributes. 
Python decided to do methods in a way that makes the instance to which the method belongs be passed automatically, 
but not received automatically: the first parameter of methods is the instance the method is called on.

********************************************************************************************
In Python, overloading is achieved by overriding the method which is specifically for that operator,
 in the user-defined class. For example, add(self, x) is a method reserved for overloading + operator, 
and eq(self, x) is for overloading == .
********************************************************************************
By overloading standard operators on a class, you can exploit the intuition of the users of that class. 

This lets users program in the language of the problem domain rather than in the language of the machine.
**********************************************************************************************************
A very popular and convenient example is the Addition (+) operator. Just think how the '+' operator operates on 
two numbers and the same operator operates on two strings. 
It performs “Addition” on numbers whereas it performs “Concatenation” on strings.

********************************************************************************
In order to develop robust and well-designed software products with Python, it is essential to obtain a comprehensive understanding of OOP.
 In this article, we will elaborate on two key concepts of OOP which are inheritance and polymorphism.

